---
const {
  headline,
  cards,
  backgroundColorMode,
  cardsPerRow,
  entryID
} = Astro.props;
const gridColNo = cardsPerRow;
const cardBgColor = "bg-interface-input";
const gridBgColor = "bg-white";

---
<div class={`${gridBgColor}`}>
      <div class="justify-center">
        {headline && (
          <h4 class="heading px-6 h4 text-center lg:max-w-[800px] mx-auto mb-10" data-contentful-field-id="headline" data-contentful-entry-id={entryID}>
            {headline}
          </h4>
        )}
        <div
          class={`grid md:grid-cols-${gridColNo} grid-cols-1 md:gap-10 gap-5 px-6 md:px-[64px]`}
        >
          {cards?.items?.map((card: any, index: number) => {
            const CardContent = (
              <div
                class={`flex flex-1 p-8 rounded-xl ${cardBgColor} flex-col justify-between overflow-hidden`}
              >
                <div>
                  <h5 class="heading h5 text-[20px] leading-[30px] font-bold text-off-black font-montserrat pb-3">
                    {card?.headline}
                  </h5>
                  <p class="font-inter text-off-black pb-3 text-[14px] leading-6">
                    {card?.subheading}
                  </p>
                  <div id={`card-${index}`} class="flex justify-center w-full">
                    {card?.image && (
                      <img
                        src={card?.image?.url}
                        alt={card?.imageAlt || ""}
                        class="w-full h-full py-4 px-2"
                        data-contentful-field-id="image"
                        data-contentful-entry-id={card?.sys?.id}
                      />
                    )}
                  </div>
                </div>
                {card?.cta && (
                  <a
                    href={card.cta.link}
                    class="flex gap-1 items-center flex-row mt-6 cursor-pointer no-underline"
                  >
                    <span class="font-normal text-md text-start" data-contentful-field-id="ctaLabel" data-contentful-entry-id={card?.sys?.id}>{card.cta.label}</span>
                  </a>
                )}
              </div>
            );
            return card.clickDestinationUrl ? (
              <div class="group hover:scale-105 transition-transform duration-300 ease-in-out">
                <a
                  href={card.clickDestinationUrl}
                  class={`block no-underline overflow-hidden rounded-xl ${cardBgColor} group-hover:shadow-lg`}
                  data-contentful-field-id="clickDestinationUrl"
                  data-contentful-entry-id={card?.sys?.id}
                >
                  {CardContent}
                </a>
              </div>
            ) : (
              <div class={`overflow-hidden rounded-xl ${cardBgColor}`}>
                {CardContent}
              </div>
            );
          })}
        </div>
      </div>
  </div>